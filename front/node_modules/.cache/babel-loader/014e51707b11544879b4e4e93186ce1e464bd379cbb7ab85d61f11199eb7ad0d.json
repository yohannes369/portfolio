{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst VRButton = /* @__PURE__ */(() => {\n  const _VRButton = class {\n    static createButton(renderer, sessionInit = {}) {\n      const button = document.createElement(\"button\");\n      function showEnterVR() {\n        let currentSession = null;\n        async function onSessionStarted(session) {\n          session.addEventListener(\"end\", onSessionEnded);\n          await renderer.xr.setSession(session);\n          button.textContent = \"EXIT VR\";\n          currentSession = session;\n        }\n        function onSessionEnded() {\n          currentSession.removeEventListener(\"end\", onSessionEnded);\n          button.textContent = \"ENTER VR\";\n          currentSession = null;\n        }\n        button.style.display = \"\";\n        button.style.cursor = \"pointer\";\n        button.style.left = \"calc(50% - 50px)\";\n        button.style.width = \"100px\";\n        button.textContent = \"ENTER VR\";\n        button.onmouseenter = () => {\n          button.style.opacity = \"1.0\";\n        };\n        button.onmouseleave = () => {\n          button.style.opacity = \"0.5\";\n        };\n        button.onclick = () => {\n          var _a;\n          if (currentSession === null) {\n            const optionalFeatures = [sessionInit.optionalFeatures, \"local-floor\", \"bounded-floor\", \"hand-tracking\"].flat().filter(Boolean);\n            (_a = navigator.xr) == null ? void 0 : _a.requestSession(\"immersive-vr\", {\n              ...sessionInit,\n              optionalFeatures\n            }).then(onSessionStarted);\n          } else {\n            currentSession.end();\n          }\n        };\n      }\n      function disableButton() {\n        button.style.display = \"\";\n        button.style.cursor = \"auto\";\n        button.style.left = \"calc(50% - 75px)\";\n        button.style.width = \"150px\";\n        button.onmouseenter = null;\n        button.onmouseleave = null;\n        button.onclick = null;\n      }\n      function showWebXRNotFound() {\n        disableButton();\n        button.textContent = \"VR NOT SUPPORTED\";\n      }\n      function stylizeElement(element) {\n        element.style.position = \"absolute\";\n        element.style.bottom = \"20px\";\n        element.style.padding = \"12px 6px\";\n        element.style.border = \"1px solid #fff\";\n        element.style.borderRadius = \"4px\";\n        element.style.background = \"rgba(0,0,0,0.1)\";\n        element.style.color = \"#fff\";\n        element.style.font = \"normal 13px sans-serif\";\n        element.style.textAlign = \"center\";\n        element.style.opacity = \"0.5\";\n        element.style.outline = \"none\";\n        element.style.zIndex = \"999\";\n      }\n      if (\"xr\" in navigator) {\n        stylizeElement(button);\n        button.id = \"VRButton\";\n        button.style.display = \"none\";\n        navigator.xr.isSessionSupported(\"immersive-vr\").then(supported => {\n          supported ? showEnterVR() : showWebXRNotFound();\n          if (supported && _VRButton.xrSessionIsGranted) {\n            button.click();\n          }\n        });\n        return button;\n      } else {\n        const message = document.createElement(\"a\");\n        if (window.isSecureContext === false) {\n          message.href = document.location.href.replace(/^http:/, \"https:\");\n          message.innerHTML = \"WEBXR NEEDS HTTPS\";\n        } else {\n          message.href = \"https://immersiveweb.dev/\";\n          message.innerHTML = \"WEBXR NOT AVAILABLE\";\n        }\n        message.style.left = \"calc(50% - 90px)\";\n        message.style.width = \"180px\";\n        message.style.textDecoration = \"none\";\n        stylizeElement(message);\n        return message;\n      }\n    }\n    static registerSessionGrantedListener() {\n      if (typeof navigator !== \"undefined\" && \"xr\" in navigator) {\n        navigator.xr.addEventListener(\"sessiongranted\", () => {\n          _VRButton.xrSessionIsGranted = true;\n        });\n      }\n    }\n  };\n  let VRButton2 = _VRButton;\n  __publicField(VRButton2, \"xrSessionIsGranted\", false);\n  VRButton2.registerSessionGrantedListener();\n  return VRButton2;\n})();\nexport { VRButton };\n//# sourceMappingURL=VRButton.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}